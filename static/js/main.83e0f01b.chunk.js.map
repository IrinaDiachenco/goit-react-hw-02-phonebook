{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/App/App.js","index.js"],"names":["ContactForm","state","name","phone","handleChangeForm","target","value","setState","handleFormSubmit","e","preventDefault","onAdd","props","validateForm","id","uuidv4","resetForm","onCheckUnique","alert","this","onSubmit","type","placeholder","onChange","Component","ContactListItem","onRemove","onClick","ContactList","contacts","length","map","Filter","filter","uniqId","App","handleAddContact","newContact","prevState","handleCheckUnique","isExistContact","find","contact","handleRemoveContact","handleFilterChange","getVisibleContacts","toLowerCase","includes","visibleContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.83e0f01b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n//import ContactList from '../ContactList';\r\n\r\nclass ContactForm extends Component {\r\n      state = {\r\n    name: \"\",\r\n    phone: \"\",\r\n  };\r\n\r\n    handleChangeForm = ({ target }) => {\r\n        const { name, value } = target\r\n        this.setState({ [name]: value })\r\n    };\r\n\r\n    handleFormSubmit = (e) => {\r\n        e.preventDefault()\r\n\r\n        const { name, phone } = this.state;\r\n        const { onAdd } = this.props;\r\n\r\n        const isValidateForm = this.validateForm()\r\n\r\n        if (!isValidateForm) return\r\n        \r\n        onAdd({ id: uuidv4(), name, phone })\r\n        this.resetForm()\r\n    };\r\n\r\n    validateForm = () => {\r\n        const { name, phone } = this.state;\r\n        const { onCheckUnique } = this.props;\r\n        if (!name || !phone) {\r\n            alert('Some filed is empty')\r\n            return false\r\n        }\r\n\r\n        return onCheckUnique(name)\r\n    }\r\n\r\n    resetForm = () => this.setState({ name: '', phone: '' });\r\n\r\n    render() {\r\n        const { name, phone } = this.state;\r\n        return (\r\n            <form onSubmit={this.handleFormSubmit}>\r\n                <input type=\"text\" name=\"name\" placeholder=\"Enter name\" value={name} onChange={this.handleChangeForm}/>\r\n                <input type=\"tel\" name=\"phone\" placeholder=\"Enter phone number\" value={phone} onChange={this.handleChangeForm} />\r\n                <button type='submit'>Add Contact</button>\r\n            </form>\r\n        )\r\n    }\r\n}\r\n\r\nContactForm.propTypes = {\r\n        name: PropTypes.string,\r\n    phone: PropTypes.number,\r\n        onCheckUnique: PropTypes.func,\r\n};\r\n\r\nexport default ContactForm;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactListItem = ({ id, name, phone, onRemove }) => {\r\n    return (\r\n        <li key={id}>\r\n            {name}: {phone} <button id={id} onClick={() => onRemove(id)}>delete</button>\r\n        </li>\r\n    )\r\n};\r\n\r\nconst ContactList = ({ contacts, onRemove }) => {\r\n    if (contacts.length === 0) return null\r\n    return (\r\n        <ul>\r\n            {contacts.map(contacts => <ContactListItem {...contacts} onRemove={onRemove} />)}\r\n        </ul>\r\n    )\r\n};\r\n\r\nContactListItem.propTypes = {\r\n        id: PropTypes.string.isRequired,\r\n        name: PropTypes.string.isRequired,\r\n        phone: PropTypes.string.isRequired,\r\n        onRemove: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst Filter = ({ filter, onChange }) => {\r\n  const uniqId = uuidv4();\r\n  return (\r\n    <input\r\n      type='text'\r\n      name='filter'\r\n      value={filter}\r\n      onChange={({ target }) => onChange(target.value)}\r\n      placeholder='Enter name for Search'\r\n      id={uniqId}\r\n    />\r\n  )\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import React, { Component } from 'react';\n//import { v4 as uuidv4 } from 'uuid';\n//import PropTypes from 'prop-types';\nimport ContactForm from '../ContactForm/ContactForm';\nimport ContactList from '../ContactList/ContactList';\nimport Filter from '../Filter/Filter';\n\nclass App extends Component {\n  state = {\n    contacts: [\n      { id: 'id-1', name: 'Rosie Simpson', phone: '459-12-56' },\n      { id: 'id-2', name: 'Hermione Kline', phone: '443-89-12' },\n      { id: 'id-3', name: 'Eden Clements', phone: '645-17-79' },\n      { id: 'id-4', name: 'Annie Copeland', phone: '227-91-26' },\n    ],\n    filter: '',\n  }\n\n  handleAddContact = (newContact) => this.setState(prevState => ({\n    contacts: [...prevState.contacts, newContact],\n  }))\n\n  handleCheckUnique = (name) => {\n    const { contacts } = this.state\n    \n    const isExistContact = !!contacts.find((contact) => contact.name === name)\n    isExistContact && alert('Contact is already exist')\n    return !isExistContact\n  }\n\n  handleRemoveContact = (id) => {\n    this.setState(prevState => {\n      return {\n        contacts: prevState.contacts.filter((contact) => contact.id !== id)\n      }\n    })\n  }\n  \n  handleFilterChange = (filter) => this.setState({ filter })\n  \n  getVisibleContacts = () => {\n    const { contacts, filter } = this.state;\n    return contacts.filter((contact) => contact.name.toLowerCase().includes(filter.toLowerCase()),\n    );\n  }\n\n  render() {\n    const { filter } = this.state\n    const visibleContacts = this.getVisibleContacts();\n    return (<div>\n      <h2>Phonebook</h2>\n      <ContactForm onAdd={this.handleAddContact} onCheckUnique={this.handleCheckUnique}/>\n      <h2>Contacts</h2>\n      <Filter filter={filter} onChange={this.handleFilterChange} onCheckUnique={this.handleCheckUnique} />\n      <ContactList contacts={visibleContacts} onRemove={this.handleRemoveContact} />\n    </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../src';\nimport App from '../src/components/App/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//reportWebVitals();\n"],"sourceRoot":""}